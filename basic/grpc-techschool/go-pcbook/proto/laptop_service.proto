syntax="proto3";

package grpcservice.laptop;

import "google/api/annotations.proto";
import "laptop_message.proto";
import "filter_message.proto";

//option go_package = "github.com/vuongle/grpc/pb";
option go_package = ".;pb";

message CreateLaptopRequest {
    Laptop laptop = 1;
}

message CreateLaptopResponse {
    string id = 1;
}

message SearchLaptopRequest {
    Filter filter = 1;
}

message SearchLaptopResponse {
    Laptop laptop = 1;
}

message ImageInfo {
    string laptop_id = 1;
    string image_type = 2;
}

message UploadImageRequest {
    oneof data {
        ImageInfo info = 1;
        bytes chunk_data = 2;
    }
}

message UploadImageResponse {
    string id = 1;
    uint32 size = 2;
}

message RateLaptopRequest {
    string laptop_id = 1;
    double score = 2;
}

message RateLaptopResponse {
    string laptop_id = 1;
    uint32 rated_count = 2;
    double average_score = 3;
}

service LaptopService {
    // Unary RPC:
    // client sends a single request to the server and gets a single response back
    rpc CreateLaptop (CreateLaptopRequest) returns (CreateLaptopResponse){
        option (google.api.http) = {
            post: "/v1/laptop/create"
            body: "*"
        };
    };

    // Server-side streaming RPC:
    // client sends a request to the server and gets a stream to read a sequence of messages back.  The client reads from the returned stream 
    // until there are no more messages. gRPC guarantees message ordering within an individual RPC call.
    rpc SearchLaptop(SearchLaptopRequest) returns (stream SearchLaptopResponse) {
        option (google.api.http) = {
            get: "/v1/laptop/search"
        };
    };

    // Client-side streaming RPC:
    rpc UploadImage(stream UploadImageRequest) returns (UploadImageResponse){
        option (google.api.http) = {
            post: "/v1/laptop/upload_image"
            body: "*"
        };
    };

    //A bidirectional streaming RPC:
    // both sides send a sequence of messages using a read-write stream. The two streams 
    // operate independently, so clients and servers can read and write in whatever 
    // order they like
    rpc RateLaptop(stream RateLaptopRequest) returns (stream RateLaptopResponse){
        option (google.api.http) = {
            post: "/v1/laptop/rate"
            body: "*"
        };
    };
}